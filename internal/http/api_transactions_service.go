/*
 * Ethereum transactions manager
 *
 * Ethereum transactions manager
 *
 * API version: 1.0.0
 * Contact: alewkinr@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package http

import (
	"context"
	"net/http"

	"github.com/alewkinr/eth-trx-manager/internal/ethtransactions"
)

// TransactionsAPIService is a service that implements the logic for the TransactionsAPIServicer
// This service should implement the business logic for every endpoint for the TransactionsAPI API.
// Include any external packages or services that will be required by this service.
type TransactionsAPIService struct {
	trxm *ethtransactions.Manager
}

// NewTransactionsAPIService creates a default api service
func NewTransactionsAPIService(trxm *ethtransactions.Manager) TransactionsAPIServicer {
	return &TransactionsAPIService{
		trxm: trxm,
	}
}

// AddTrx - CreateTransaction
func (s *TransactionsAPIService) AddTrx(ctx context.Context, transaction Transaction) (ImplResponse, error) {
	trx := &ethtransactions.Transaction{}

	updatedTrx, createTrxErr := s.trxm.CreateTransaction(ctx, trx)
	if createTrxErr != nil {
		return Response(http.StatusInternalServerError, nil), createTrxErr
	}

	// TODO - update AddTrx with the required logic for this service method.
	// Add api_transactions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Transaction{}) or use other options such as http.Ok ...
	// return Response(200, Transaction{}), nil

	// TODO: Uncomment the next line to return response Response(4XX, ErrBadRequest{}) or use other options such as http.Ok ...
	// return Response(4XX, ErrBadRequest{}), nil

	// TODO: Uncomment the next line to return response Response(5XX, ErrInternalError{}) or use other options such as http.Ok ...
	// return Response(5XX, ErrInternalError{}), nil

	return Response(http.StatusOK, Transaction{
		Hash: updatedTrx.Hash().String(),
		From: updatedTrx.From().String(),
		To:   updatedTrx.To().String(),
		Value: TransactionValue{
			Amount:   updatedTrx.Value().Int64(),
			Fraction: updatedTrx.Value().Int64(),
		},
		Timestamp: updatedTrx.Timestamp(),
	}), nil
}

// GetByTrxId - GetTransaction
func (s *TransactionsAPIService) GetByTrxId(ctx context.Context, hash string) (ImplResponse, error) {
	trx := &ethtransactions.Transaction{}
	trx.SetHash(hash)

	updatedTrx, getTrxErr := s.trxm.GetTransaction(ctx, trx)
	if getTrxErr != nil {
		return Response(http.StatusInternalServerError, nil), getTrxErr
	}
	// TODO - update GetByTrxId with the required logic for this service method.
	// Add api_transactions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Transaction{}) or use other options such as http.Ok ...
	// return Response(200, Transaction{}), nil

	// TODO: Uncomment the next line to return response Response(4XX, ErrBadRequest{}) or use other options such as http.Ok ...
	// return Response(4XX, ErrBadRequest{}), nil

	// TODO: Uncomment the next line to return response Response(5XX, ErrInternalError{}) or use other options such as http.Ok ...
	// return Response(5XX, ErrInternalError{}), nil

	return Response(http.StatusOK, Transaction{
		Hash: updatedTrx.Hash().String(),
		From: updatedTrx.From().String(),
		To:   updatedTrx.To().String(),
		Value: TransactionValue{
			Amount:   updatedTrx.Value().Int64(),
			Fraction: 0,
		},
		Timestamp: updatedTrx.Timestamp(),
	}), nil
}

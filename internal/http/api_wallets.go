/*
 * Ethereum transactions manager
 *
 * Ethereum transactions manager
 *
 * API version: 1.0.0
 * Contact: alewkinr@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package http

import (
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// WalletsAPIController binds http requests to an api service and writes the service results to the http response
type WalletsAPIController struct {
	service      WalletsAPIServicer
	errorHandler ErrorHandler
}

// WalletsAPIOption for how the controller is set up.
type WalletsAPIOption func(*WalletsAPIController)

// WithWalletsAPIErrorHandler inject ErrorHandler into controller
func WithWalletsAPIErrorHandler(h ErrorHandler) WalletsAPIOption {
	return func(c *WalletsAPIController) {
		c.errorHandler = h
	}
}

// NewWalletsAPIController creates a default api controller
func NewWalletsAPIController(s WalletsAPIServicer, opts ...WalletsAPIOption) Router {
	controller := &WalletsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WalletsAPIController
func (c *WalletsAPIController) Routes() Routes {
	return Routes{
		"GetEthBalanceById": Route{
			strings.ToUpper("Get"),
			"/wallets/{address}",
			c.GetEthBalanceById,
		},
	}
}

// GetEthBalanceById - GetWalletBalance
func (c *WalletsAPIController) GetEthBalanceById(w http.ResponseWriter, r *http.Request) {
	addressParam := chi.URLParam(r, "address")
	if addressParam == "" {
		c.errorHandler(w, r, &RequiredError{"address"}, nil)
		return
	}
	result, err := c.service.GetEthBalanceById(r.Context(), addressParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package ethtransactions

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
)

const (
	// StatusIsPending is a Status of type IsPending.
	StatusIsPending Status = iota
	// StatusDone is a Status of type Done.
	StatusDone
)

var ErrInvalidStatus = errors.New("not a valid Status")

const _StatusName = "ISPENDINGDONE"

var _StatusMap = map[Status]string{
	StatusIsPending: _StatusName[0:9],
	StatusDone:      _StatusName[9:13],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _StatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Status) IsValid() bool {
	_, ok := _StatusMap[x]
	return ok
}

var _StatusValue = map[string]Status{
	_StatusName[0:9]:                   StatusIsPending,
	strings.ToLower(_StatusName[0:9]):  StatusIsPending,
	_StatusName[9:13]:                  StatusDone,
	strings.ToLower(_StatusName[9:13]): StatusDone,
}

// ParseStatus attempts to convert a string to a Status.
func ParseStatus(name string) (Status, error) {
	if x, ok := _StatusValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _StatusValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is %w", name, ErrInvalidStatus)
}

// MarshalText implements the text marshaller method.
func (x Status) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errStatusNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Status) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Status(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = Status(v)
	case string:
		*x, err = ParseStatus(v)
	case []byte:
		*x, err = ParseStatus(string(v))
	case Status:
		*x = v
	case int:
		*x = Status(v)
	case *Status:
		if v == nil {
			return errStatusNilPtr
		}
		*x = *v
	case uint:
		*x = Status(v)
	case uint64:
		*x = Status(v)
	case *int:
		if v == nil {
			return errStatusNilPtr
		}
		*x = Status(*v)
	case *int64:
		if v == nil {
			return errStatusNilPtr
		}
		*x = Status(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = Status(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errStatusNilPtr
		}
		*x = Status(*v)
	case *uint:
		if v == nil {
			return errStatusNilPtr
		}
		*x = Status(*v)
	case *uint64:
		if v == nil {
			return errStatusNilPtr
		}
		*x = Status(*v)
	case *string:
		if v == nil {
			return errStatusNilPtr
		}
		*x, err = ParseStatus(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x Status) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullStatus struct {
	Status Status
	Valid  bool
	Set    bool
}

func NewNullStatus(val interface{}) (x NullStatus) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Scan implements the Scanner interface.
func (x *NullStatus) Scan(value interface{}) (err error) {
	x.Set = true
	if value == nil {
		x.Status, x.Valid = Status(0), false
		return
	}

	err = x.Status.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullStatus) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.Status.String(), nil
}

// MarshalJSON correctly serializes a NullStatus to JSON.
func (n NullStatus) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.Status)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullStatus from JSON.
func (n *NullStatus) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}

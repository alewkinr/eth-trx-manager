/*
 * Ethereum transactions manager
 *
 * Ethereum transactions manager
 *
 * API version: 1.0.0
 * Contact: alewkinr@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package http

import (
	"context"
	"net/http"

	"github.com/alewkinr/eth-trx-manager/internal/ethwallet"
)

// WalletsAPIService is a service that implements the logic for the WalletsAPIServicer
// This service should implement the business logic for every endpoint for the WalletsAPI API.
// Include any external packages or services that will be required by this service.
type WalletsAPIService struct {
	wm *ethwallet.Manager
}

// NewWalletsAPIService creates a default api service
func NewWalletsAPIService(wm *ethwallet.Manager) WalletsAPIServicer {
	return &WalletsAPIService{wm}
}

// GetEthBalanceById - GetWalletBalance
func (s *WalletsAPIService) GetEthBalanceById(ctx context.Context, address string) (ImplResponse, error) {
	wallet := &ethwallet.Wallet{}
	wallet.SetAddress(address)

	if refreshBalanceErr := s.wm.RefreshBalance(ctx, wallet); refreshBalanceErr != nil {
		// todo: cases when wallet not found, etc
		return Response(http.StatusInternalServerError, nil), refreshBalanceErr
	}
	// Add api_wallets_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, []Wallet{}) or use other options such as http.Ok ...
	// return Response(200, []Wallet{}), nil

	// TODO: Uncomment the next line to return response Response(4XX, ErrBadRequest{}) or use other options such as http.Ok ...
	// return Response(4XX, ErrBadRequest{}), nil

	// TODO: Uncomment the next line to return response Response(5XX, ErrInternalError{}) or use other options such as http.Ok ...
	// return Response(5XX, ErrInternalError{}), nil

	// todo: check wallet info is valid
	return Response(http.StatusOK, Wallet{
		Address: wallet.Address().String(),
		Balance: wallet.Balance().String(),
	}), nil
}
